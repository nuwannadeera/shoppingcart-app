{"version":3,"sources":["cart/CartContext.js","FruitItem/Fruits.js","FruitItem/FruitList.js","cart/Cart.js","App.js","serviceWorker.js","index.js"],"names":["CartContext","React","createContext","CartProvider","props","useState","cart","setCart","Provider","value","children","Fruits","useContext","className","src","img","name","price","onClick","fruititem","currentState","FruitList","id","map","item","key","Cart","totalPrice","reduce","acc","currcy","console","log","itm","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAEaA,EAAcC,IAAMC,gBAEpBC,EAAe,SAACC,GAAW,IAAD,EACXC,mBAAS,IADE,mBAC5BC,EAD4B,KACtBC,EADsB,KAEnC,OACI,kBAACP,EAAYQ,SAAb,CAAsBC,MAAO,CAACH,EAAMC,IAC/BH,EAAMM,WCLNC,EAAS,SAACP,GAAW,IAAD,EACNQ,qBAAWZ,GADL,mBACjBO,GADiB,WAQ7B,OACI,yBAAKM,UAAU,eACX,wBAAIA,UAAU,aACd,6BACA,6BACA,yBAAKA,UAAU,MAAMC,IAAKV,EAAMW,MAC5B,6BACJ,4BAAKX,EAAMY,MACX,oCAAUZ,EAAMa,OACZ,4BAAQJ,UAAU,aAAaK,QAdzB,WACd,IAAMC,EAAY,CAACH,KAAMZ,EAAMY,KAAMC,MAAOb,EAAMa,MAAMF,IAAKX,EAAMW,KACnER,GAAQ,SAAAa,GAAY,4BAAQA,GAAR,CAAqBD,SAYjC,eCjBHE,EAAY,WAoBrB,OACI,6BAnBa,CACb,CACIC,GAAI,EAAGN,KAAM,mBAAoBC,MAAO,IAAQF,IAAK,+GAEzD,CACIO,GAAI,EAAGN,KAAM,cAAeC,MAAO,GAAOF,IAAK,iHAEnD,CACIO,GAAI,EAAGN,KAAM,aAAcC,MAAO,GAAOF,IAAK,iHAElD,CACIO,GAAI,EAAGN,KAAM,kBAAmBC,MAAO,GAAOF,IAAK,gHAEvD,CACIO,GAAI,EAAGN,KAAM,iBAAkBC,MAAO,GAAOF,IAAK,+GAMxCQ,KAAI,SAAAC,GAAI,OACd,kBAAC,EAAD,CAAQR,KAAMQ,EAAKR,KAAMC,MAAOO,EAAKP,MAAOF,IAAKS,EAAKT,IAAKU,IAAKD,EAAKF,UCvBxEI,EAAO,WAAO,IAAD,EACEd,qBAAWZ,GADb,mBACfM,EADe,KAGhBqB,GAHgB,KAGHrB,EAAKsB,QAAO,SAACC,EAAKC,GAAN,OAAiBD,EAAMC,EAAOb,QAAM,IAGnE,OAFAc,QAAQC,IAAI1B,GAGR,6BACI,6BACCA,EAAKiB,KAAI,SAAAU,GAAG,OACL,2BACI,+BACI,4BACI,qCACA,0CACA,2CAEJ,4BACI,4BACA,yBAAKnB,IAAKmB,EAAIlB,OAGd,4BACCkB,EAAIjB,MAGL,4BACCiB,EAAIhB,QAGT,kCAMhB,+CAAqBX,EAAK4B,QAC1B,6CAAmBP,KCtBhBQ,MAXf,WACI,OACI,kBAAC,EAAD,KACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.60a1c9b4.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nexport const CartContext = React.createContext();\n\nexport const CartProvider = (props) => {\n    const [cart, setCart] = useState([]);\n    return (\n        <CartContext.Provider value={[cart, setCart]}>\n            {props.children}\n        </CartContext.Provider>\n    )\n}","import React, {useContext} from 'react';\nimport {CartContext} from '../cart/CartContext';\n\nexport const Fruits = (props) => {\n    const [cart,setCart] = useContext(CartContext);\n\n    const addToCart = () => {\n        const fruititem = {name: props.name, price: props.price,img: props.img};\n        setCart(currentState => [...currentState,fruititem]);\n    }\n\n    return (\n        <div className=\"fruitDetail\">\n            <ul className=\"Cart-list\">\n            <br/>\n            <br/>\n            <img className=\"img\" src={props.img} />\n                <br/>\n            <h2>{props.name}</h2>\n            <h4>Rs:  {props.price}</h4>\n                <button className=\"addcartbtn\" onClick={addToCart}>Add Cart</button>\n            </ul>\n        </div>\n    )\n}","import React from 'react';\nimport { Fruits } from './Fruits';\n\nexport const FruitList = () => {\n\n    const database = [\n        {\n            id: 1, name: \"Apple Banana 1kg\", price: 300.00, img: \"https://lh3.googleusercontent.com/qJk9W6gjnMxhbXD-GqTJsNTg1tSMtmu1O9Ge6P2Bzzx_BbUztnQDBFL-IGppyVJ4o_ya=s134\"\n        },\n        {\n            id: 2, name: \"Green Apple\", price: 60.00, img: \"https://lh3.googleusercontent.com/_01ydXQqaSyFmKeSjEIYiXy_lQhxWLZ96HK2FXJLDzB1SadcnUUBuWXN9I39lJj4cl7rVfs=s88\"\n        },\n        {\n            id: 3, name: \"Green Pear\", price: 80.00, img: \"https://lh3.googleusercontent.com/o5XgEtfJXnN0sU_mV_3LkbfXlOuSp7AkLRevoXSPiXp6HPQxtodG_v0p4ymjQsDzUScBwJM=s85\"\n        },\n        {\n            id: 4, name: \"Imported Orange\", price: 40.00, img: \"https://lh3.googleusercontent.com/ptTP3S4xHJcHf4_DW5bGVRTdVyA3CdA2voAOBaNyZIsvZPIyIRQu4eeDOQWsZgsPpAW-cg=s85\"\n        },\n        {\n            id: 5, name: \"Karthakolomban\", price: 90.00, img: \"https://lh3.googleusercontent.com/xSGOguAf4hKsRr1CSCAkrBidwW41hP4uHA8X0ab4ZxrCgaC3RKp-pvA1vO3MLWEUxsbZ=s85\"\n        }\n    ]\n\n    return(\n        <div>\n            {database.map(item => (\n                <Fruits name={item.name} price={item.price} img={item.img} key={item.id} />\n            ))}\n        </div>\n    )\n}","import React, {useContext} from 'react';\nimport {CartContext} from './CartContext';\n\nexport const Cart = () => {\n    const [cart, setCart] = useContext(CartContext);\n\n    const totalPrice = cart.reduce((acc, currcy) => acc + currcy.price,0);\n    console.log(cart);\n\n    return(\n        <div>\n            <br />\n            {cart.map(itm => (\n                    <p>\n                        <table>\n                            <tr>\n                                <th>Image</th>\n                                <th>Fruit name</th>\n                                <th>Price (Rs)</th>\n                            </tr>\n                            <tr>\n                                <td>\n                                <img src={itm.img} />\n                                </td>\n\n                                <td>\n                                {itm.name}\n                                </td>\n\n                                <td>\n                                {itm.price}\n                                </td>\n                            </tr>\n                            <hr/>\n                        </table>\n                    </p>\n\n            ))}\n\n            <h4>Items in Cart : {cart.length}</h4>\n            <h4>Total Price : {totalPrice}</h4>\n        </div>\n    )\n}\n\n","import React from 'react';\nimport './App.css';\nimport {FruitList} from './FruitItem/FruitList';\nimport {Cart} from \"./cart/Cart\";\nimport {CartProvider} from \"./cart/CartContext\";\n\n\nfunction App() {\n    return (\n        <CartProvider>\n            <div>\n                <FruitList />\n                <Cart />\n            </div>\n        </CartProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}